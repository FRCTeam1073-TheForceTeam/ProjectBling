/* FIRST Team 1073's RobotBuilder (0.0.2) for WPILibExtensions ---
Do not mix this code with any other version of RobotBuilder! */
#include "Bling_Bling.h"
#include "../Robotmap.h"
Bling_Bling::Bling_Bling() : Subsystem("Bling_Bling") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	red_Light = RobotMap::bling_BlingRed_Light;
	light = RobotMap::bling_BlingLight;
	blue_Light = RobotMap::bling_BlingBlue_Light;
	green_Light = RobotMap::bling_BlingGreen_Light;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	duty_red = .5;
	duty_green = .5;
	duty_blue = .5;
	blue_Light->EnablePWM(duty_blue);
	blue_Light->SetPWMRate(1000);
	green_Light->EnablePWM(duty_green);
	green_Light->SetPWMRate(1000);
	red_Light->EnablePWM(duty_red);
	red_Light->SetPWMRate(1000);
	blueLed = new Colors(0.0, 0.0, 1.0);
	redLed = new Colors(1.0, 0.0, 0.0);
	greenLed = new Colors(0.0, 1.0, 0.0);
}
    
void Bling_Bling::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}
// Put methods for controlling this subsystem
// here. Call these from Commands.
void Bling_Bling::lowerBrightness(int color){
	
	if(BLUE == color){
		//decrement duty_cycle
		duty_blue -= 0.1;
		//check that color is not less than zero
		if(duty_blue < 0){
			duty_blue = 0;
		}
		//lower the color
		blue_Light->UpdateDutyCycle(duty_blue);
		printf("duty_blue = %f\n",duty_blue);
		}
	else if(RED == color){
		//decrement duty_cycle
		duty_red -= 0.1;
		//check that color is not less than zero
		if(duty_red < 0){
			duty_red = 0;
		}
		//lower the color
		red_Light->UpdateDutyCycle(duty_red);
		printf("duty_red = %f\n",duty_red);
	}
	else if(GREEN == color){
		//decrement duty_cycle
		duty_green -= 0.1;
		//check that color is not less than zero
		if(duty_green < 0){
			duty_green = 0;
		}
		//lower the color
		green_Light->UpdateDutyCycle(duty_green);
		printf("duty_green = %f\n",duty_green);
		
	}
	else {
	//need to return error code	
		
		printf("bad color = %d\n",color);
	}
	
}
void Bling_Bling::raiseBrightness(int color){
	if(BLUE == color){
			//increment duty_cycle
			duty_blue += 0.1;
			//check that color is not less than zero
			if(duty_blue > 1){
				duty_blue = 1;
			}
			//lower the color
			blue_Light->UpdateDutyCycle(duty_blue);
			printf("duty_blue = %f\n",duty_blue);
			}
		else if(RED == color){
			//increment duty_cycle
			duty_red += 0.1;
			//check that color is not less than zero
			if(duty_red > 1){
				duty_red = 1;
			}
			//lower the color
			red_Light->UpdateDutyCycle(duty_red);
			printf("duty_red = %f\n",duty_red);
		}
		else if(GREEN == color){
			//increment duty_cycle
			duty_green += 0.1;
			//check that color is not less than zero
			if(duty_green > 1){
				duty_green = 1;
			}
			//lower the color
			green_Light->UpdateDutyCycle(duty_green);
			printf("duty_green = %f\n",duty_green);
			
		}
		else {
		//need to return error code	
			
			printf("bad color = %d\n",color);
		}
}
void Bling_Bling::setLed(int color){
	if (BLUE == color){
		setLedColor(blueLed);
	}
	else if (RED == color){
		setLedColor(redLed);
	}
	else if (GREEN == color){
		setLedColor(greenLed);
	}
	else {
		printf("bad led\n");
	}
}
void Bling_Bling::setLedColor(Colors* color){
	red_Light->UpdateDutyCycle(color->getRed());
	green_Light->UpdateDutyCycle(color->getGreen());
	blue_Light->UpdateDutyCycle(color->getBlue());
	printf("red = %f green = %f blue = %f\n", color->getRed(), color->getGreen(), color->getBlue());
}
